Kehan Wang
wangkk@bu.edu

1.
the best case is O(1) (when we find the root key)
the worst case is O(n) (n is the height of tree, in worst case you have to go all the way down to level n)
the worst case of unbalanced tree is O(n) (n is the height of tree, in this worst case, you want to find the rightmost node)

2.
private static int depthInTree(int key, Node root) {
    if (key == root.key) {
        return 0;
    }

    if (root.left != null && key < root.key) {
        int depthInLeft = depthInTree(key, root.left);
        if (depthInLeft != -1) {
            return depthInLeft + 1;
        }
    }

    if (root.right != null && key > root.key) {
        int depthInRight = depthInTree(key, root.right);
        if (depthInRight != -1) {
            return depthInRight + 1;
        }
    }

    return -1;
}

3.

The best case is O(1)(find the root key)
The worst case is O(log n)(n is the height of tree, in worst case you have to go all the way down to level n)
The worst case is O(n) (n is the height of tree, the key is either leftmost or the rightmost node)